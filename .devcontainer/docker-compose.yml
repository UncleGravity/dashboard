version: '3.8'

name: dashboard

services:

  # TELEGRAF ##################################################
  telegraf:
    container_name: telegraf
    image: telegraf:latest
    user: telegraf:999 # <--- important, calculate user that owns docker.sock -> $(stat -c '%g' /var/run/docker.sock)
    network_mode: host
    volumes:
      - /:/hostfs:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - ./telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro
    environment:
      HOST_PROC: /hostfs/proc
      HOST_ETC: /hostfs/etc
      HOST_SYS: /hostfs/sys
      HOST_VAR: /hostfs/var
      HOST_RUN: /hostfs/run
      HOST_MOUNT_PREFIX: /hostfs
    restart: always
    env_file:
      - .env

  # POSTGRES-EXPORTER ###########################################
  # Example for PostgreSQL 9.4 or later host
  # postgres-exporter-pgserver94:
  #   container_name: postgres-exporter
  #   image: quay.io/prometheuscommunity/postgres-exporter:master
  #   restart: unless-stopped
  #   ports:
  #     - 9187:9187
  #   environment:
  #     - DATA_SOURCE_NAME=postgres://postgres:rouwqig2e62W4CqRcBem@timescaledb:5432/postgres?sslmode=disable

  # PROMETHEUS ##################################################
  # prometheus:
  #   container_name: prometheus
  #   image: prom/prometheus:latest
  #   restart: unless-stopped
  #   volumes:
  #     - prometheus-data:/prometheus
  #     - ./prometheus/config:/etc/prometheus/
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     - '--storage.tsdb.path=/prometheus'
  #     - '--web.console.libraries=/etc/prometheus/console_libraries'
  #     - '--web.console.templates=/etc/prometheus/consoles'
  #     - '--web.enable-lifecycle'
  #     # - '--storage.tsdb.retention.time=30d'
  #   ports:
  #     - 9090:9090

  # CADVISOR ##################################################
  # cadvisor:
  #   container_name: cadvisor
  #   image: gcr.io/cadvisor/cadvisor:v0.47.0
  #   restart: unless-stopped
  #   volumes:
  #     - /var/run:/var/run:ro
  #     - /sys:/sys:ro
  #     - /var/lib/docker/:/var/lib/docker:ro
  #     - /var/run/docker.sock:/var/run/docker.sock:ro
  #     - /etc/machine-id:/etc/machine-id:ro
  #     - /var/lib/dbus/machine-id:/var/lib/dbus/machine-id:ro
  #     - /:/rootfs:ro
  #     - /dev/disk/:/dev/disk:ro
  #   privileged: true
  #   devices:
  #     - /dev/kmsg:/dev/kmsg
  #   ports:
  #     - 8080:8080

  # NODE EXPORTER ##################################################
  # node-exporter:
  #   container_name: node-exporter
  #   image: prom/node-exporter:latest
  #   restart: unless-stopped
  #   pid: host
  #   volumes:
  #     - /proc:/host/proc:ro
  #     - /sys:/host/sys:ro
  #     - /:/rootfs:ro
  #   command:
  #     - '--path.procfs=/host/proc'
  #     - '--path.rootfs=/rootfs'
  #     - '--path.sysfs=/host/sys'
  #     - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
  #   ports:
  #     - 9100:9100

  # TIMESCALE DB ##################################################
  timescaledb:
    container_name: timescaledb
    image: timescale/timescaledb:latest-pg14
    restart: unless-stopped
    ports:
      - 5432:5432
    volumes:
      - timescaledb-data:/var/lib/postgresql/data
    env_file:
      - .env

  # SUPERSCRAPER ##################################################
  superscraper:
    container_name: superscraper
    build: 
      context: .
      dockerfile: Dockerfile

    volumes:
      - ../:/workspaces/dashboard
      
    # Overrides default command so things don't shut down after the process ends.
    # command: sleep infinity

    # Runs app on the same network as the database container, allows "forwardPorts" in devcontainer.json function.
    network_mode: service:timescaledb

    # Use "forwardPorts" in **devcontainer.json** to forward an app port locally. 
    # (Adding the "ports" property to this file will not forward from a Codespace.)
    depends_on:
      - timescaledb
    env_file:
      - .env

  # GRAFANA ##################################################
  grafana:
    container_name: grafana
    image: grafana/grafana
    ports:
      - 3000:3000
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      # - ./grafana/data/dashboards:/etc/dashboards
    depends_on:
      - timescaledb
    env_file:
      - .env

    # Add "forwardPorts": ["5432"] to **devcontainer.json** to forward PostgreSQL locally.
    # (Adding the "ports" property to this file will not forward from a Codespace.)

volumes:
  prometheus-data:
  timescaledb-data:
  grafana-data:
